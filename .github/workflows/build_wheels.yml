name: "Build and publish Python wheels"

on:
  push:
    branches: main
  workflow_dispatch:
    inputs:
      target:
        description: 'Deployment target. Can be "pypi" or "testpypi"'
        default: 'pypi'

jobs:
  build_windows_wheels:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2

      - name: Install mingw on windows
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python-pip

      - name: test
        run: |
          which python
          which pip
          python --version

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==1.9.0

      - name: Clone pybind11 repo (no history)
        run: git clone --depth 1 --branch v2.6.2 https://github.com/pybind/pybind11.git

      - name: check gcc compiler
        run: |
          gcc --version

      - name: check g++ compiler
        run: |
          g++ --version

      - name: check gfortran compiler
        run: |
          gfortran --version

      # see https://github.com/pybamm-team/PyBaMM/pull/1930
      - name: Install the latest version of vcpkg on windows
        run: |
          cd /c
          rm -rf vcpkg
          git clone https://github.com/microsoft/vcpkg
          cd vcpkg
          ./bootstrap-vcpkg.bat

      - name: Build 64 bits wheels on Windows
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ENVIRONMENT: "PYBAMM_USE_VCPKG=ON VCPKG_ROOT_DIR=$cd/vcpkg VCPKG_DEFAULT_TRIPLET=x64-mingw-dynamic VCPKG_DEFAULT_HOST_TRIPLET=x64-mingw-dynamic VCPKG_FEATURE_FLAGS=manifests,registries CMAKE_GENERATOR=\"MinGW Makefiles\""
          CIBW_BEFORE_BUILD: "python -m pip install casadi numpy"
          CIBW_ARCHS: "AMD64"
          CIBW_BUILD_VERBOSITY: 1

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==1.9.0

      - name: Clone pybind11 repo (no history)
        run: git clone --depth 1 --branch v2.6.2 https://github.com/pybind/pybind11.git

      - name: Install sundials on macOS
        if: matrix.os == 'macos-latest'
        run: |
          # https://github.com/actions/virtual-environments/issues/1280
          brew update
          brew reinstall gcc
          python -m pip install cmake wget
          python scripts/install_KLU_Sundials.py

      - name: Build wheels on Linux and MacOS
        if: matrix.os != 'windows-latest'
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BEFORE_ALL_LINUX: "bash build_manylinux_wheels/install_sundials.sh 5.8.1 5.7.0"
          CIBW_BEFORE_BUILD: "python -m pip install cmake casadi numpy"
          CIBW_SKIP: pp*


      - name: Install mingw on windows
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            base-devel
            mingw-w64-x86_64-toolchain

      - name: Add mingw64 to path
        if: matrix.os == 'windows-latest'
        run: echo "D:/a/_temp/msys/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: print path
        if: matrix.os == 'windows-latest'
        run: echo $env:PATH

      - name: check gcc compiler
        if: matrix.os == 'windows-latest'
        run: |
          gcc.exe --version

      - name: check g++ compiler
        if: matrix.os == 'windows-latest'
        run: |
          g++.exe --version

      - name: check gfortran compiler
        if: matrix.os == 'windows-latest'
        run: |
          gfortran.exe --version

      # see https://github.com/pybamm-team/PyBaMM/pull/1930
      - name: Install the latest version of vcpkg on windows
        if: matrix.os == 'windows-latest'
        run: |
          cd C:\
          rm -r -fo 'C:\vcpkg'
          git clone https://github.com/microsoft/vcpkg
          cd vcpkg
          .\bootstrap-vcpkg.bat

      - name: Cache packages installed through vcpkg on windows
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v2
        env:
          cache-name: vckpg_binary_cache
        with:
          path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: ${{ runner.os }}-build-${{ env.cache-name }}-v1-${{ hashFiles('vcpkg*.json') }}

      - name: Build 64 bits wheels on Windows
        if: matrix.os == 'windows-latest'
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ENVIRONMENT: "PYBAMM_USE_VCPKG=ON VCPKG_ROOT_DIR=$cd/vcpkg VCPKG_DEFAULT_TRIPLET=x64-mingw-dynamic VCPKG_DEFAULT_HOST_TRIPLET=x64-mingw-dynamic VCPKG_FEATURE_FLAGS=manifests,registries CMAKE_GENERATOR=\"MinGW Makefiles\" CC=gcc CXX=g++"
          CIBW_BEFORE_BUILD: "python -m pip install casadi numpy"
          CIBW_ARCHS: "AMD64"
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./wheelhouse/*.whl


  publish-pypi:
    name: Upload wheels to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheels

      - name: Publish wheels on PyPI
        if: |
          github.event.inputs.target == 'pypi' ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: wheels/

      - name: Publish wheels on TestPyPI
        if: github.event.inputs.target == 'testpypi'
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TESTPYPI_TOKEN }}
          packages_dir: wheels/
          repository_url: https://test.pypi.org/legacy/
